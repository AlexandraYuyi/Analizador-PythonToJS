import esprima
from lexer import Lexer
import json


def find_variable_declaration(identifier, ast):
    """
    Find a variable declaration for the given identifier in the AST generated by Esprima.
    Returns True if found and not an object or property, otherwise False.
    """
    for node in ast['body']:
        match node['type']:
            case 'VariableDeclaration':
                for decl in node['declarations']:
                    if decl['id']['type'] == 'Identifier' and decl['id']['name'] == identifier:
                        if 'init' in decl:
                            return True
    if identifier == 'console':
        return True
    if identifier == 'log':
        return True
    return False


def analyze_semantics(file_path):
    with open(file_path, 'r') as file:
        code = file.read()
    # ast = esprima.parseScript(code)
    ast = {
        "type": "Program",
        "sourceType": "script",
        "body": [
            {
                "type": "VariableDeclaration",
                "declarations": [
                    {
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "a"
                        },
                        "init": {
                            "type": "BinaryExpression",
                            "operator": "*",
                            "left": {
                                "type": "Literal",
                                "value": "hola",
                                "raw": "\"hola\""
                            },
                            "right": {
                                "type": "Literal",
                                "value": "hola",
                                "raw": "'hola'"
                            }
                        }
                    }
                ],
                "kind": "let"
            },
            {
                "type": "ExpressionStatement",
                "expression": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "MemberExpression",
                        "computed": False,
                        "object": {
                            "type": "Identifier",
                            "name": "console"
                        },
                        "property": {
                            "type": "Identifier",
                            "name": "log"
                        }
                    },
                    "arguments": [
                        {
                            "type": "Identifier",
                            "name": "g"
                        }
                    ]
                }
            }
        ]
    }
    lexer = Lexer(code)
    lexer.tokenize()
    symbol_table = lexer.tokens
    # print(ast)
    # print()
    # print(lexer)
    # print()
    # print(symbol_table)

    # Perform semantic analysis checks
    semantic_errors = []

    # Check for undefined variables
    for token in symbol_table:
        # print(token)
        if token.type == 'IDENTIFIER':
            if not find_variable_declaration(token.value, ast):
                semantic_errors.append(f"Undefined variable: {token.value}")

    # Return True if no semantic errors found, False otherwise
    print(semantic_errors)
    return not semantic_errors


# Usage example
file_path = 'e2.js'
if analyze_semantics(file_path):
    print("No semantic errors found.")
else:
    print("Semantic errors detected.")
